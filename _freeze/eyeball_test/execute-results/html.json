{
  "hash": "b8551eabe9e86a5b1bd0ca7f71a992ab",
  "result": {
    "markdown": "---\ntitle: \"Eyeball Test\"\nauthor: \"Stephen Pierzchajlo\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(lsr)\nlibrary(ggpubr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# model parameters\nintercept <- 350\nslope = 0\nsimulations <- 20000\nsample_size <- 100\n\n# empty dataframe to fill in the loop\ndf <- data.frame(\"p\" = numeric(),\n                 \"r\" = numeric(),\n                 \"cohen_d\" = numeric())\n\n# simulate power\nfor (i in 1:simulations) {\n  x <- rep(c(0, 1), each = sample_size/2)\n  y <- intercept + slope*x + rnorm(sample_size, mean = 10, sd = 5)\n  sim_df <- data.frame(x, y)\n  model <-  lm(y ~ x, data = sim_df)\n  p_value <- summary(model)$coefficients[2,4]\n  r <- sqrt(summary(model)$r.squared)\n  cohen_d <- abs((summary(model)$coefficients[2, 1])/(sqrt(100)*summary(model)$coefficients[2, 2]))\n  temp <- data.frame(\"p\" = p_value,\n                     \"r\" = r,\n                     \"cohen_d\" = cohen_d)\n  df <- rbind(temp, df)\n}\n# calculate power from simulation\ntype_I_error_rate <- (length(df[df$p <= 0.05, 1]))/simulations * 100\nprint(paste0(\"Type-I Error Rate: \", round(type_I_error_rate, 1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Type-I Error Rate: 5.1\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# graph simulation results\nggplot(df, aes(x = p)) +\n  geom_histogram(bins = 100 , fill = \"#6497b1\") +\n  geom_vline(xintercept = 0.05, linetype=\"dashed\", color = \"black\", size = 1) +\n  theme_minimal() +\n  ggtitle(paste0(\"p < 0.05 = \", round(type_I_error_rate, 1), \"%\", \" , Effect Size = \", slope, \", n = \", sample_size))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](eyeball_test_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = r, y = p)) +\n  geom_point() +\n  geom_hline(yintercept = 0.05, linetype=\"dashed\", color = \"blue\", size = 1)\n```\n\n::: {.cell-output-display}\n![](eyeball_test_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = cohen_d, y = p)) +\n  geom_point() +\n  geom_hline(yintercept = 0.05, linetype=\"dashed\", color = \"blue\", size = 1)\n```\n\n::: {.cell-output-display}\n![](eyeball_test_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = cohen_d, y = r)) +\n  geom_point() +\n  geom_hline(yintercept = 0.05, linetype=\"dashed\", color = \"blue\", size = 1)\n```\n\n::: {.cell-output-display}\n![](eyeball_test_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_eyeball <- df[df$cohen_d >= 0.1, ]\ntype_I_error_rate <- (length(df_eyeball[df_eyeball$p <= 0.05, 1]))/nrow(df_eyeball) * 100\n\nggplot(df_eyeball, aes(x = p)) +\n  geom_histogram(bins = 200) +\n  xlim(0, 1) +\n  geom_vline(xintercept = 0.05, linetype=\"dashed\", \n             color = \"blue\", size=1) +\n  ggtitle(paste0(\"Error Rate = \", round(type_I_error_rate,1), \"%\", \" , True Effect Size = \", slope, \", n = \", sample_size))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n:::\n\n::: {.cell-output-display}\n![](eyeball_test_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_list <- list()\n#df_eyeball <- df[df$cohen_d >= 0.1, ]\n#type_I_error_rate <- (length(df_eyeball[df_eyeball$p <= 0.05, 1]))/nrow(df_eyeball) * 100\n\nfor (i in c(0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2)) {\n  df_eyeball <- df[df$cohen_d >= i, ]\n  type_I_error_rate <- (length(df_eyeball[df_eyeball$p <= 0.05, 1]))/nrow(df_eyeball) * 100\n  temp_graph <- ggplot(df_eyeball, aes(x = p)) +\n    geom_histogram(bins = 100 , fill = \"#6497b1\") +\n    xlim(0, 1) +\n    geom_vline(xintercept = 0.05, linetype=\"dashed\", color = \"black\", size = 1) +\n    theme_minimal() +\n    ggtitle(paste0(\"p < 0.05 = \", round(type_I_error_rate, 1), \"%\"))\n  temp_list[[as.character(i)]] <- temp_graph\n}\n\n# Define the number of columns and rows\nnum_columns <- 4\nnum_rows <- 3\n\n# Use do.call to pass all elements of temp_list to ggarrange with specified columns and rows\narranged_plots <- do.call(ggarrange, c(temp_list, ncol = num_columns, nrow = num_rows))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n:::\n\n```{.r .cell-code}\n# Print or display the arranged plots\nprint(arranged_plots)\n```\n\n::: {.cell-output-display}\n![](eyeball_test_files/figure-html/unnamed-chunk-8-1.png){width=2400}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulate eyeball test: Continuous x\n# model parameters\nintercept <- 350\nslope = 0\nsimulations <- 10000\nsample_size <- 1000\n\n# empty dataframe to fill in the loop\ndf <- data.frame(\"p\" = numeric(),\n                 \"r\" = numeric(),\n                 \"cohen_d\" = numeric())\ndf_eyeball <- data.frame(\"p\" = numeric(),\n                         \"r\" = numeric(),\n                         \"cohen_d\" = numeric())\n\n# simulate power\nfor (i in 1:simulations) {\n  x <- rep(c(0, 1), each = sample_size/2)\n  y <- intercept + slope*x + rnorm(sample_size, mean = 50, sd = 15)\n  sim_df <- data.frame(x, y)\n  model <-  lm(y ~ x, data = sim_df)\n  p_value <- summary(model)$coefficients[2, 4]\n  r <- sqrt(summary(model)$r.squared)\n  cohen_d <- abs((summary(model)$coefficients[2, 1])/(sqrt(100)*summary(model)$coefficients[2, 2]))\n  temp <- data.frame(\"p\" = p_value,\n                     \"r\" = r,\n                     \"cohen_d\" = cohen_d)\n  df <- rbind(temp, df)\n  if (cohen_d >= 0.18) {\n    temp_eyeball <- data.frame(\"p\" = p_value,\n                               \"r\" = r,\n                               \"cohen_d\" = cohen_d)\n    df_eyeball <- rbind(temp_eyeball, df_eyeball)\n  }\n}\nmean(df$cohen_d)\ntype_I_error_rate <- (length(df[df$p <= 0.05, 1]))/simulations * 100\ntype_I_error_rate_eyeball <- (length(df_eyeball[df_eyeball$p <= 0.05, 1]))/nrow(df_eyeball) * 100\nprint(paste0(\"Type-I Error Rate: \", round(type_I_error_rate, 1), \"%\"))\nprint(paste0(\"Type-I Error Rate For Eyeball Test: \", round(type_I_error_rate_eyeball, 1), \"%\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_eyeball <- df[df$cohen_d >= 0.1, ]\nggplot(df, aes(x = p)) +\n  geom_histogram(bins = 200) +\n  xlim(0, 1) +\n  geom_vline(xintercept = 0.05, linetype=\"dashed\", \n             color = \"blue\", size=1) +\n  ggtitle(paste0(\"Error Rate = \", round(type_I_error_rate_eyeball,1), \"%\", \" , True Effect Size = \", slope, \", n = \", sample_size))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_eyeball, aes(x = p)) +\n  geom_histogram(bins = 200) +\n  xlim(0, 1) +\n  geom_vline(xintercept = 0.05, linetype=\"dashed\", \n             color = \"blue\", size=1) +\n  ggtitle(paste0(\"Error Rate = \", round(type_I_error_rate_eyeball,1), \"%\", \" , True Effect Size = \", slope, \", n = \", sample_size))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_eyeball, aes(x = p, y = r)) +\n  geom_point() +\n  geom_vline(xintercept = 0.05, linetype=\"dashed\", color = \"blue\", size = 1)\n```\n:::",
    "supporting": [
      "eyeball_test_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}