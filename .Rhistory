stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
coord_cartesian(xlim = range(CVA_Bayes$RP_C),
ylim = c(-3, 4)) +
labs(subtitle = "Counterfactual plot: Week 1-4",
y = "SRA",
x = "Stress") +
theme_bw() +
theme(panel.grid = element_blank())
nd <-
tibble(Anxiety_C = seq(from = -5, to = 5, length.out = 601),
RP_C = mean(CVA_Bayes$RP_C),
PSS_C = mean(CVA_Bayes$PSS_C),
Depression_C = mean(CVA_Bayes$Depression_C),
Week = CVA_Bayes$Week,
Age_C = mean(CVA_Bayes$Age_C))
aaaa <- fitted(COVID_Bayes_Model_2_Final, newdata = nd) %>%
as_tibble() %>%
# since `fitted()` and `predict()` name their intervals the same way,
# we'll need to `rename()` them to keep them straight
rename(f_ll = Q2.5,
f_ul = Q97.5) %>%
# note how we're just nesting the `predict()` code right inside `bind_cols()`
bind_cols(
predict(COVID_Bayes_Model_2_Final, newdata = nd) %>%
as_tibble() %>%
# since we only need the intervals, we'll use `transmute()` rather than `mutate()`
transmute(p_ll = Q2.5,
p_ul = Q97.5),
# now tack on the `nd` data
nd)
Anxiety_Graph_AllWeeks <- ggplot(data = aaaa, aes(x = Anxiety_C, y = Estimate)) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 1", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 1", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 2", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 2", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
coord_cartesian(xlim = range(CVA_Bayes$RP_C),
ylim = c(-3, 4)) +
labs(subtitle = "Counterfactual plot: Week 1-4",
y = "SRA",
x = "Anxiety") +
theme_bw() +
theme(panel.grid = element_blank())
nd <-
tibble(Depression_C = seq(from = -5, to = 5, length.out = 601),
RP_C = mean(CVA_Bayes$RP_C),
PSS_C = mean(CVA_Bayes$PSS_C),
Anxiety_C = mean(CVA_Bayes$Depression_C),
Week = CVA_Bayes$Week,
Age_C = mean(CVA_Bayes$Age_C))
aaaa <- fitted(COVID_Bayes_Model_2_Final, newdata = nd) %>%
as_tibble() %>%
# since `fitted()` and `predict()` name their intervals the same way,
# we'll need to `rename()` them to keep them straight
rename(f_ll = Q2.5,
f_ul = Q97.5) %>%
# note how we're just nesting the `predict()` code right inside `bind_cols()`
bind_cols(
predict(COVID_Bayes_Model_2_Final, newdata = nd) %>%
as_tibble() %>%
# since we only need the intervals, we'll use `transmute()` rather than `mutate()`
transmute(p_ll = Q2.5,
p_ul = Q97.5),
# now tack on the `nd` data
nd)
Depression_Graph_AllWeeks <- ggplot(data = aaaa, aes(x = Depression_C, y = Estimate)) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 1", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 1", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 2", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 2", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
coord_cartesian(xlim = range(CVA_Bayes$RP_C),
ylim = c(-3, 4)) +
labs(subtitle = "Counterfactual plot: Week 1-4",
y = "SRA",
x = "Depression") +
theme_bw() +
theme(panel.grid = element_blank())
nd <-
tibble(Age_C = seq(from = -5, to = 5, length.out = 601),
RP_C = mean(CVA_Bayes$RP_C),
PSS_C = mean(CVA_Bayes$PSS_C),
Anxiety_C = mean(CVA_Bayes$Depression_C),
Week = CVA_Bayes$Week,
Depression_C = mean(CVA_Bayes$Depression_C))
aaaa <- fitted(COVID_Bayes_Model_2_Final, newdata = nd) %>%
as_tibble() %>%
# since `fitted()` and `predict()` name their intervals the same way,
# we'll need to `rename()` them to keep them straight
rename(f_ll = Q2.5,
f_ul = Q97.5) %>%
# note how we're just nesting the `predict()` code right inside `bind_cols()`
bind_cols(
predict(COVID_Bayes_Model_2_Final, newdata = nd) %>%
as_tibble() %>%
# since we only need the intervals, we'll use `transmute()` rather than `mutate()`
transmute(p_ll = Q2.5,
p_ul = Q97.5),
# now tack on the `nd` data
nd)
Age_Graph_AllWeeks <- ggplot(data = aaaa, aes(x = Age_C, y = Estimate)) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 1", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 1", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 2", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 2", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
geom_ribbon(data = aaaa[aaaa$Week == "Week 3", ],aes(ymin = p_ll, ymax = p_ul),
fill = "firebrick", alpha = 1/5) +
geom_smooth(data = aaaa[aaaa$Week == "Week 3", ], aes(ymin = f_ll, ymax = f_ul),
stat = "identity",
fill = "firebrick", color = "firebrick4", alpha = 1/5, size = 1/4) +
coord_cartesian(xlim = range(CVA_Bayes$RP_C),
ylim = c(-3, 4)) +
labs(subtitle = "Counterfactual plot: Week 1-4",
y = "SRA",
x = "Age") +
theme_bw() +
theme(panel.grid = element_blank())
AllWeeksPlot <- ggarrange(RP_Graph_AllWeeks, PSS_Graph_AllWeeks, Anxiety_Graph_AllWeeks, Depression_Graph_AllWeeks, Age_Graph_AllWeeks, ncol = 2, nrow = 3)
annotate_figure(AllWeeksPlot,
top = text_grob("All Weeks", color = "black", face = "bold", size = 14))
library(ggplot2)
library(lme4)
#> Loading required package: Matrix
#> Loading required package: methods
library(dplyr)
library(tibble)
m_no_pooled_Week1 <- brm(SRA_C~ 1 + RP_C + PSS_C + Anxiety_C + Depression_C  + Age_C, data=CVA_Bayes[CVA_Bayes$Week == "Week 1", ],
family = gaussian(),
prior = c(
prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = b, coef = "RP_C"),
prior(normal(0, 1), class = b, coef = "PSS_C"),
prior(normal(0, 1), class = b, coef = "Anxiety_C"),
prior(normal(0, 1), class = b, coef = "Depression_C"),
#prior(normal(0, 1), class = b, coef = "Age_C"),
prior(cauchy(0, 1), class = sigma)),
file = "C:/Users/STPI0560/Desktop/Website/content/projects/2-covid19-altruism/models/m_no_pooled_Week1.rds",
iter = 40000, warmup = 2000, cores = 4, chains =1, seed = 123, control = list(adapt_delta = 0.995))
m_no_pooled_Week2 <- brm(SRA_C~ 1 + RP_C + PSS_C + Anxiety_C + Depression_C  + Age_C, data=CVA_Bayes[CVA_Bayes$Week == "Week 2", ],
family = gaussian(),
prior = c(
prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = b, coef = "RP_C"),
prior(normal(0, 1), class = b, coef = "PSS_C"),
prior(normal(0, 1), class = b, coef = "Anxiety_C"),
prior(normal(0, 1), class = b, coef = "Depression_C"),
#prior(normal(0, 1), class = b, coef = "Age_C"),
prior(cauchy(0, 1), class = sigma)),
file = "C:/Users/STPI0560/Desktop/Website/content/projects/2-covid19-altruism/models/m_no_pooled_Week2.rds",
iter = 40000, warmup = 2000, cores = 4, chains =1, seed = 123, control = list(adapt_delta = 0.995))
m_no_pooled_Week3 <- brm(SRA_C~ 1 + RP_C + PSS_C + Anxiety_C + Depression_C  + Age_C, data=CVA_Bayes[CVA_Bayes$Week == "Week 3", ],
family = gaussian(),
prior = c(
prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = b, coef = "RP_C"),
prior(normal(0, 1), class = b, coef = "PSS_C"),
prior(normal(0, 1), class = b, coef = "Anxiety_C"),
prior(normal(0, 1), class = b, coef = "Depression_C"),
#prior(normal(0, 1), class = b, coef = "Age_C"),
prior(cauchy(0, 1), class = sigma)),
file = "C:/Users/STPI0560/Desktop/Website/content/projects/2-covid19-altruism/models/m_no_pooled_Week3.rds",
iter = 40000, warmup = 2000, cores = 4, chains =1, seed = 123, control = list(adapt_delta = 0.995))
m_no_pooled_Week4<- brm(SRA_C~ 1 + RP_C + PSS_C + Anxiety_C + Depression_C  + Age_C, data=CVA_Bayes[CVA_Bayes$Week == "Week 4", ],
family = gaussian(),
prior = c(
prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = b, coef = "RP_C"),
prior(normal(0, 1), class = b, coef = "PSS_C"),
prior(normal(0, 1), class = b, coef = "Anxiety_C"),
prior(normal(0, 1), class = b, coef = "Depression_C"),
#prior(normal(0, 1), class = b, coef = "Age_C"),
prior(cauchy(0, 1), class = sigma)),
file = "C:/Users/STPI0560/Desktop/Website/content/projects/2-covid19-altruism/models/m_no_pooled_Week4.rds",
iter = 40000, warmup = 2000, cores = 4, chains =1, seed = 123, control = list(adapt_delta = 0.995))
df_no_pooled_Week1 <- data_frame(
Model = "no pooling",
Week = "Week 1",
Intercept = fixef(m_no_pooled_Week1)[1],
Slope_RP_C = fixef(m_no_pooled_Week1)[2],
Slope_PSS_C = fixef(m_no_pooled_Week1)[3],
Slope_Anxiety_C = fixef(m_no_pooled_Week1)[4],
Slope_Depression_C = fixef(m_no_pooled_Week1)[5],
Slope_Age_C = fixef(m_no_pooled_Week1)[6])
df_no_pooled_Week2 <- data_frame(
Model = "no pooling",
Week = "Week 2",
Intercept = fixef(m_no_pooled_Week2)[1],
Slope_RP_C = fixef(m_no_pooled_Week2)[2],
Slope_PSS_C = fixef(m_no_pooled_Week2)[3],
Slope_Anxiety_C = fixef(m_no_pooled_Week2)[4],
Slope_Depression_C = fixef(m_no_pooled_Week2)[5],
Slope_Age_C = fixef(m_no_pooled_Week2)[6])
df_no_pooled_Week3 <- data_frame(
Model = "no pooling",
Week = "Week 3",
Intercept = fixef(m_no_pooled_Week3)[1],
Slope_RP_C = fixef(m_no_pooled_Week3)[2],
Slope_PSS_C = fixef(m_no_pooled_Week3)[3],
Slope_Anxiety_C = fixef(m_no_pooled_Week3)[4],
Slope_Depression_C = fixef(m_no_pooled_Week3)[5],
Slope_Age_C = fixef(m_no_pooled_Week3)[6])
df_no_pooled_Week4 <- data_frame(
Model = "no pooling",
Week = "Week 4",
Intercept = fixef(m_no_pooled_Week4)[1],
Slope_RP_C = fixef(m_no_pooled_Week4)[2],
Slope_PSS_C = fixef(m_no_pooled_Week4)[3],
Slope_Anxiety_C = fixef(m_no_pooled_Week4)[4],
Slope_Depression_C = fixef(m_no_pooled_Week4)[5],
Slope_Age_C = fixef(m_no_pooled_Week4)[6])
df_no_pooling <- rbind(df_no_pooled_Week1, df_no_pooled_Week2, df_no_pooled_Week3, df_no_pooled_Week4)
# Full COVID model: adaptive delta = 0.99.
m_pooled <- brm(SRA_C~ 1 + RP_C + PSS_C + Anxiety_C + Depression_C  + Age_C, data=CVA_Bayes,
family = gaussian(),
prior = c(
prior(normal(0, 1), class = Intercept),
prior(normal(0, 1), class = b, coef = "RP_C"),
prior(normal(0, 1), class = b, coef = "PSS_C"),
prior(normal(0, 1), class = b, coef = "Anxiety_C"),
prior(normal(0, 1), class = b, coef = "Depression_C"),
#prior(normal(0, 1), class = b, coef = "Age_C"),
prior(cauchy(0, 1), class = sigma)),
file = "C:/Users/STPI0560/Desktop/Website/content/projects/2-covid19-altruism/models/m_pooled.rds",
iter = 40000, warmup = 2000, cores = 4, chains =1, seed = 123, control = list(adapt_delta = 0.995))
# Repeat the intercept and slope terms for each participant
df_pooled <- data_frame(
Model = "complete pooling",
Week = unique(CVA_Bayes$Week),
Intercept = fixef(m_pooled)[1],
Slope_RP_C = fixef(m_pooled)[2],
Slope_PSS_C = fixef(m_pooled)[3],
Slope_Anxiety_C = fixef(m_pooled)[4],
Slope_Depression_C = fixef(m_pooled)[5],
Slope_Age_C = fixef(m_pooled)[6])
head(df_pooled)
library(dplyr)
# create a vector with letters in the desired order
x <- c("Week 1", "Week 2", "Week 3", "Week 4")
df_pooled %>%
slice(match(x, Week))
# Join the raw data so we can use plot the points and the lines.
df_models <- bind_rows(df_pooled, df_no_pooling) %>%
left_join(CVA_Bayes, by = "Week")
p_model_comparison_RP <- ggplot(df_models) +
aes(x = RP_C, y = SRA_C) +
# Set the color mapping in this layer so the points don't get a color
geom_abline(aes(intercept = Intercept, slope = Slope_RP_C, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ Week, ncol = 4) +
xlab("RP_C") +
ylab("SRA_C") +
ggtitle("RP")
p_model_comparison_RP
# Join the raw data so we can use plot the points and the lines.
df_models <- bind_rows(df_pooled, df_no_pooling) %>%
left_join(CVA_Bayes, by = "Week")
p_model_comparison_PSS <- ggplot(df_models) +
aes(x = PSS_C, y = SRA_C) +
# Set the color mapping in this layer so the points don't get a color
geom_abline(aes(intercept = Intercept, slope = Slope_PSS_C, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ Week, ncol = 4) +
xlab("PSS_C") +
ylab("SRA_C") +
ggtitle("PSS")
p_model_comparison_PSS
# Join the raw data so we can use plot the points and the lines.
df_models <- bind_rows(df_pooled, df_no_pooling) %>%
left_join(CVA_Bayes, by = "Week")
p_model_comparison_Anxiety <- ggplot(df_models) +
aes(x = Anxiety_C, y = SRA_C) +
# Set the color mapping in this layer so the points don't get a color
geom_abline(aes(intercept = Intercept, slope = Slope_RP_C, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ Week, ncol = 4) +
xlab("Anxiety_C") +
ylab("SRA_C") +
ggtitle("Anxiety")
p_model_comparison_Anxiety
# Join the raw data so we can use plot the points and the lines.
df_models <- bind_rows(df_pooled, df_no_pooling) %>%
left_join(CVA_Bayes, by = "Week")
p_model_comparison_Depression <- ggplot(df_models) +
aes(x = Depression_C, y = SRA_C) +
# Set the color mapping in this layer so the points don't get a color
geom_abline(aes(intercept = Intercept, slope = Slope_RP_C, color = Model),
size = .75) +
geom_point() +
facet_wrap(~ Week, ncol = 4) +
xlab("Depression_C") +
ylab("SRA_C") +
ggtitle("Depression")
p_model_comparison_Depression
# Make a dataframe with the fitted effects
#df_partial_pooling <- fixef(COVID_Bayes_Model_2_Final)
Intercept1 <- coef(COVID_Bayes_Model_2_Final)$Week[, , 1]
RP_C1 <- coef(COVID_Bayes_Model_2_Final)$Week[, , 2]
PSS_C1 <- coef(COVID_Bayes_Model_2_Final)$Week[, , 3]
Anxiety_C1 <- coef(COVID_Bayes_Model_2_Final)$Week[, , 4]
Depression_C1 <- coef(COVID_Bayes_Model_2_Final)$Week[, , 5]
Age_C1 <- coef(COVID_Bayes_Model_2_Final)$Week[, , 6]
# Repeat the intercept and slope terms for each participant
df_partial_pooling  <- data_frame(
Model = "Partial pooling",
Week = unique(CVA_Bayes$Week),
Intercept = Intercept1[,1],
Slope_RP_C = RP_C1[,1],
Slope_PSS_C = PSS_C1[,1],
Slope_Anxiety_C = Anxiety_C1[,1],
Slope_Depression_C = Depression_C1[,1],
Slope_Age_C = Age_C1[,1])
df_models <- bind_rows(df_pooled, df_no_pooling, df_partial_pooling) %>%
left_join(CVA_Bayes, by = "Week")
# Replace the data-set of the last plot
p_model_comparison_RP %+% df_models
p_model_comparison_PSS %+% df_models
p_model_comparison_Anxiety %+% df_models
p_model_comparison_Depression %+% df_models
# Also visualize the point for the fixed effects
df_fixef <- data_frame(
Model = "Partial pooling (average)",
Intercept = fixef(m_pooled)[1],
Slope_RP_C = fixef(m_pooled)[2],
Slope_PSS_C = fixef(m_pooled)[3],
Slope_Anxiety_C = fixef(m_pooled)[4],
Slope_Depression_C = fixef(m_pooled)[5])
# Complete pooling / fixed effects are center of gravity in the plot
df_gravity <- df_pooled %>%
distinct(Model, Intercept, Slope_RP_C, Slope_PSS_C, Slope_Anxiety_C, Slope_Depression_C) %>%
bind_rows(df_fixef)
#df_gravity
df_pulled <- bind_rows(df_no_pooling, df_partial_pooling)
ggplot(df_pulled) +
aes(x = Intercept, y = Slope_RP_C, color = Model) +
geom_point(size = 2) +
geom_point(data = df_gravity, size = 5) +
# Draw an arrow connecting the observations between models
geom_path(aes(group = Week, color = NULL),
arrow = arrow(length = unit(.02, "npc"))) +
# Use ggrepel to jitter the labels away from the points
ggrepel::geom_text_repel(
aes(label = Week, color = NULL),
data = df_no_pooling) +
ggrepel::geom_text_repel(
aes(label = Week, color = NULL)) +
theme(legend.position = "bottom") +
ggtitle("Pooling of regression parameters") +
xlab("Intercept estimate") +
ylab("RP estimate") +
scale_color_brewer(palette = "Dark2")
ggplot(df_pulled) +
aes(x = Intercept, y = Slope_PSS_C, color = Model) +
geom_point(size = 2) +
geom_point(data = df_gravity, size = 5) +
# Draw an arrow connecting the observations between models
geom_path(aes(group = Week, color = NULL),
arrow = arrow(length = unit(.02, "npc"))) +
# Use ggrepel to jitter the labels away from the points
ggrepel::geom_text_repel(
aes(label = Week, color = NULL),
data = df_no_pooling) +
ggrepel::geom_text_repel(
aes(label = Week, color = NULL)) +
theme(legend.position = "bottom") +
ggtitle("Pooling of regression parameters") +
xlab("Intercept estimate") +
ylab("PSS estimate") +
scale_color_brewer(palette = "Dark2")
ggplot(df_pulled) +
aes(x = Intercept, y = Slope_Anxiety_C, color = Model) +
geom_point(size = 2) +
geom_point(data = df_gravity, size = 5) +
# Draw an arrow connecting the observations between models
geom_path(aes(group = Week, color = NULL),
arrow = arrow(length = unit(.02, "npc"))) +
# Use ggrepel to jitter the labels away from the points
ggrepel::geom_text_repel(
aes(label = Week, color = NULL),
data = df_no_pooling) +
ggrepel::geom_text_repel(
aes(label = Week, color = NULL)) +
theme(legend.position = "bottom") +
ggtitle("Pooling of regression parameters") +
xlab("Intercept estimate") +
ylab("Anxiety estimate") +
scale_color_brewer(palette = "Dark2")
ggplot(df_pulled) +
aes(x = Intercept, y = Slope_Depression_C, color = Model) +
geom_point(size = 2) +
geom_point(data = df_gravity, size = 5) +
# Draw an arrow connecting the observations between models
geom_path(aes(group = Week, color = NULL),
arrow = arrow(length = unit(.02, "npc"))) +
# Use ggrepel to jitter the labels away from the points
ggrepel::geom_text_repel(
aes(label = Week, color = NULL),
data = df_no_pooling) +
ggrepel::geom_text_repel(
aes(label = Week, color = NULL)) +
theme(legend.position = "bottom") +
ggtitle("Pooling of regression parameters") +
xlab("Intercept estimate") +
ylab("Depression estimate") +
scale_color_brewer(palette = "Dark2")
# Load libraries
library(tidyr)
library(ggplot2)
library(gghighlight)
library(plyr)
library(readr)
library(plotly)
library(ggpubr)
library(dplyr)
library(bayesplot)
library(rethinking)
library(ggmcmc)
library(brms)
library(broom)
library(ggrepel)
# Here, we load .csv files from github. These are updated daily, so everytime this analysis is run, it uses the
# most up to date information.
# Total Global Cases Data
COVID_US_Wide<-read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"))
# Total Global Deaths Data
COVID_US_Deaths_Wide <-read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"))
# Total global cases data in long format.
COVID_US_Long_Date <- gather(COVID_US_Wide, date, cases, 12:ncol(COVID_US_Wide), factor_key=TRUE)
# Total global deaths data in long format
COVID_US_Deaths_Long_Date <- gather(COVID_US_Deaths_Wide, date, cases, 13:ncol(COVID_US_Deaths_Wide),
factor_key=TRUE)
# Filter States as the  cases dataset also includes groups (American Samoa) and boats (Diamond Cruise ship).
Covid_US_Filter <- COVID_US_Long_Date %>% dplyr::filter(
`Province_State` %in% c("Alabama", "Alaska", "Arizona", "Arkansas", "California",
"Colorado", "Connecticut", "Delaware", "District of Columbia", "Florida", "Georgia",
"Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana",
"Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi",
"Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma",
"Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota",
"Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington",
"West Virginia", "Wisconsin", "Wyoming"))
# Filter data to only include dates starting from March 1st.
Covid_US_Filter <- Covid_US_Filter[126558:nrow(Covid_US_Filter), ]
# Further reduce columns to only include states, dates, and cases.
Covid_US_Filter <- ddply(Covid_US_Filter, c("`Province_State`", "date"), summarise,
cases = sum(cases))
# Filter States as the deaths dataset also includes groups (American Samoa) and boats (Diamond Cruise ship).
Covid_US_Deaths_Filter <- COVID_US_Deaths_Long_Date %>% dplyr::filter(
`Province_State` %in% c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado",
"Connecticut", "Delaware", "District of Columbia", "Florida", "Georgia", "Hawaii",
"Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine",
"Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri",
"Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico",
"New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon",
"Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
"Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia",
"Wisconsin", "Wyoming"))
# Filter States as the dataset also includes groups (American Samoa) and boats (Diamond Cruise ship).
Covid_US_Deaths_Filter <- Covid_US_Deaths_Filter[126558:nrow(Covid_US_Deaths_Filter), ]
# Filter States as the dataset also includes groups (American Samoa) and boats (Diamond Cruise ship).
Covid_US_Deaths_Filter <- ddply(Covid_US_Deaths_Filter, c("`Province_State`", "date"), summarise,
deaths = sum(cases))
